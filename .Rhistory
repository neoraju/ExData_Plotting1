load (KernSmooth)
library(KernSmooth)
## This is a secondary heading
### This is a tertiary heading
* list first unnumbered
* list  unnumbered
}
add2 <- function(x,y) {
x + y
}
add2(3,8)
above<-function(x, n){
use <-x>n
}
x<01:20
x<-1:20
above(20,10)
above<-function(x, n){
use <-x>n
x[use]
}
above(1:20,10)
above10(1:20)
above10<- function(x){
use <- x>10
x[use]
}
above10(1:23,4)
above10(1:23)
above<-function(x, n=10){
use <-x>n
x[use]
}
above(17)
x<-1:25
above(x)
colmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1: nc){
mean(y[,i])
}
means
}
colmean(airquality)
colmean(volcano)
dim(volcano)
volcano
colmean<-function(y) {
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
colmean(volcano)
colmean<-function(y, removeNA= TRUE) {
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm=removeNA)
}
means
}
comean(cf)
colmean(cf)
warnings()
colmean(cf)
formals(colmean)
formals(plot)
formals(ggplot)
formals(plot)
## First function makeCacheMatrix takes the input of matrix from user and stores the value of inverse of matrix after first calculation for future use.
## Second function cacheSolve checks if the inverse of matrix alread calculated by lookinf in the first function and if not calculates, stores in first function and displays the result.
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix())
{ 			##  This will take the input  of  matrix from the user
m<-NULL 																			##  sets the initial value of inverse of matrix NULL  so that if the matrix supplied is different from
##  the value of inverse of matrix from previous matrix is set to NULL. This one is used in 2 different instances :
##  1) when this function is used for first time, 2) when input matrix is changed to different one by x$ set command
set<-function (y)
{
x<<- y
m<<- NULL
}
get<-function()x
setinverse<-function (inverse) m <<- inverse
getinverse<-function() m
list( set = set , get=get,
setinverse=setinverse,
getinverse= getinverse)
}
## This is the function called to calculate the inverse of the matrix. This function checks if the inverse is already calculated and displays it if so. If not it will calcualate it and store in "m" and displays it.
cacheSolve <- function(x, ...)
{
m<-x$getinverse() 															##  this is the line of code when user asks for the inverse of matrix- getting the value of inverse matrix (m) from  makeCacheMatrix function
if(!is.null(m))
{ 															##  checking if the value of m already calculated from previous operation. If there is a store value of m it will go to next line of code below
message("getting cached data") 								##  giving a message that its getting the value of m from previous calculations
return(m)  																		##  output the value fo m
}  																							##  if the value of m is NULL the following line of code is executed
data<-x$get() 																	##  gets the value of matrix from makeCacheMatrix function
m<-solve(data) 																	##  calculates the inverse of matrix by solve function
x$setinverse(m) 																##  sets the value of inverse of matrix to makeCacheMatrix  function to be used later
m  																						  ##  Return a matrix that is the inverse of 'x', no message is displayed as its  calculating the value first time
}
m<-matrix(c(1,0), c(0,1), 2, 2 )
m<-matrix(c(1,0), c(0,1))
a<-c(0,1)
b<-c(1,0)
m<-matrix(a,b)
m
m<-matrix(a,b, 2,2 )
m
m<-as.matrix(a,b, 2,2 )
m
a
b
a
m<-c(b,a)
m
m<-matrix(b,a)
m<-as.matrix(rbind(b,a))
m
makeCacheMatrix(m)
m<-makeCacheMatrix()
cacheSolve(m)
a
b
a<-c(3,1)
b<-1,1
b<-c(1,1)
m<-as.matrix(rbind(a,b))
m
m<-makeCacheMatrix
cacheSolve(m)
m
,
z<-as.matrix(rbind(a,b))
z<-makeCacheMatrix
z
z<-makeCacheMatrix()
z
cacheSolve(z)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
View(volcano)
View(cf)
View(volcano)
system.time()
set.seed(10)
x<-rep(0:1, each=5)
x
e<-rnorm(10, 0,20)
e
y<-0.5+2*x+e
y
hist(y)
log(-1)
log(7.14)
antilog(7.14)
?log
source('~/R/simple.R')
x<-5
simple(10)
simple(-100)
x
source('~/R/simple.R')
simple(-100)
source('~/R/simple.R')
simple(NA)
source('~/R/simple.R')
simple2(4)
source('~/R/simple.R')
simple2(4)
source('~/R/simple.R')
simple2(4)
source('~/R/simple.R')
simple2(4)
simple2(log(-1))
simple2(-09)
source('~/R/simple.R')
a<-matrix(c(1,0), c(0,1))
a<-matrix(c(1,0), c(0,1),2,2)
a<-matrix(1,0,1,0)
a
a<-matrix(c(2,3,4))
a
a<-matrix(c(2,3,4,4),2,2)
a
makeCacheMatrix(a)
x<-makeCacheMatrix(a)
x$get
x
cacheSolve9x
cacheSolve(x)
b<-matrix(c(1,1,1,1),2,2)
set$x<-b
b<-set$x
b<-x$set
x$get
x$get()
b
cacheSolve(b)
install.packages(quantmod)
install.packages("quantmod)
install.packages("quantmod")
getwd()
setwd("~/R")
getwd()
source('~/R/multi.R')
data1<-read.csv("dataFeb25.csv")
data2<-data
data2<-data1
names(data2)
class(data$group)
head(data1$group)
class(data1$group)
data2$group<-as.numeric(as.facator(data2$group))
data2$group<-as.numeric(as.factor(data2$group))
class(data2$group)
head(data2$group)
head(data1$group)
data.frame('a' = c(rep(1,2),rep(3,20)), 'b' = c(rep('n',4), rep('b',5), rep('g', 13)) )
good <- names(table(dat$b))[table(dat$b)>=5]
good
dat<-data.frame('a' = c(rep(1,2),rep(3,20)), 'b' = c(rep('n',4), rep('b',5), rep('g', 13)) )
good <- names(table(dat$b))[table(dat$b)>=5]
good
source('~/R/loan.R')
install.packages("ggplot2")
library(ggplot2)
source('~/R/loan.R')
source('~/R/loan2.R')
install.packages("ggplot2")
tst
test
View(test)
View(ttd)
View(test)
View(ttd)
View(test)
rm(test)
test<-read.csv("testblank.csv")
test
View(test)
dim(test)
rm(test)
test<-read.csv("testblank.csv")
test
setwd("~/GitHub/ExData_Plotting1")
load("~/GitHub/ExData_Plotting1/Untitled.RData")
dim(data)
attach(data)
with(data, plot(x=datetime, Sub_metering_1, type="s",  ylab="Energy sub metering", xlab="" ))
plot(x=datetime, Global_active_power, type="s", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file = "plot2.png")
dev.off()
attach(data)
hist(Global_active_power, col="red", xlab="Global Active Power (kilowatts)", main="Global Active Power")
dev.copy(png, file = "plot1.png")
dev.off()
save.image("~/GitHub/ExData_Plotting1/Untitled.RData")
